/*
 * Copyright 2021 Paul Rybitskyi, paul.rybitskyi.work@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.paulrybitskyi.hiltbinder.processor.ksp.generator

import com.google.devtools.ksp.processing.CodeGenerator
import com.google.devtools.ksp.processing.Dependencies
import com.google.devtools.ksp.symbol.KSFile
import com.paulrybitskyi.hiltbinder.processor.brandnew.utils.BIND_TYPE_SIMPLE_NAME
import com.paulrybitskyi.hiltbinder.processor.ksp.model.ContributionType
import com.paulrybitskyi.hiltbinder.processor.ksp.model.HiltComponent
import com.paulrybitskyi.hiltbinder.processor.ksp.model.ModuleSchema
import com.paulrybitskyi.hiltbinder.processor.ksp.utils.declaration
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.TypeSpec

internal class ModuleFileGenerator(
    private val typeSpecFactory: TypeSpecFactory,
    private val codeGenerator: CodeGenerator
) {


    fun generateFiles(moduleSchemas: List<ModuleSchema>) {
        for(moduleSchema in moduleSchemas) {
            val typeSpec = typeSpecFactory.createTypeSpec(moduleSchema)
            val kotlinFile = typeSpec.generateKotlinFile(moduleSchema)
            val sourceFiles = moduleSchema.getSourceFiles().toTypedArray()
            val outputStream = codeGenerator.createNewFile(
                Dependencies(true, *sourceFiles),
                kotlinFile.packageName,
                kotlinFile.name
            )

            outputStream.writer().use { writer ->
                val kotlinCode = kotlinFile.toString()
                    .addNewlineCharacterAfterComment()
                    .removePublicKeywordFromMethods()
                    .reformatLineBreaksForLongMethodNames()
                    .removeTrailingNewline()

                writer.write(kotlinCode)
            }
        }
    }


    private fun TypeSpec.generateKotlinFile(moduleSchema: ModuleSchema): FileSpec {
        return FileSpec.builder(moduleSchema.packageName, moduleSchema.interfaceName)
            .addComment("Generated by @$BIND_TYPE_SIMPLE_NAME. Do not modify!")
            .addType(this)
            .build()
    }


    private fun ModuleSchema.getSourceFiles(): List<KSFile> {
        val sourceFiles = mutableListOf<KSFile?>()

        sourceFiles.add(componentType.containingFile)

        for(binding in bindings) {
            if(binding.component is HiltComponent.Custom) {
                sourceFiles.add(binding.component.component.containingFile)
            }

            if(binding.contributionType is ContributionType.Map) {
                sourceFiles.add(binding.contributionType.mapKeyAnnotation.declaration.containingFile)
            }

            if(binding.qualifierAnnotation != null) {
                sourceFiles.add(binding.qualifierAnnotation.declaration.containingFile)
            }

            sourceFiles.add(binding.paramType.containingFile)
            sourceFiles.add(binding.returnType.type.declaration.containingFile)
        }

        return sourceFiles.filterNotNull()
    }


    private fun String.addNewlineCharacterAfterComment(): String {
        return replaceFirst("\n", "\n\n")
    }


    private fun String.removePublicKeywordFromMethods(): String {
        return replace("public( |\n      )".toRegex(), "")
    }


    private fun String.reformatLineBreaksForLongMethodNames(): String {
        return replace("\\(binding: (\\w+)\\):\n      ".toRegex()) { match ->
            // Apparently,[0] group is always the entire expression.
            // That's why [1] group is used here to grab the binding type.
            "(\n      binding: ${match.groupValues[1]}): "
        }
    }


    private fun String.removeTrailingNewline(): String {
        return trim()
    }


}